server:
  port: 8080

  tomcat:
    keep-alive-timeout: 190000  # 밀리초 단위로 설정 (190초)

spring:
  main:
    web-application-type: reactive
    allow-bean-definition-overriding: true

  application:
    name: gateway-service

  datasource:
    url: none
    driver-class-name: none

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true  # Eureka를 통해 서비스 검색 활성화
          lower-case-service-id: true  # 서비스 ID를 소문자로 변환하여 Eureka와 일치시킴
      routes:
        - id: member-service
          uri: lb://MEMBER-SERVICE  # Eureka에서 검색
          predicates:
            - Path=/api/members/**
        - id: trip-service
          uri: lb://TRIP-SERVICE
          predicates:
            - Path=/api/trips/**
        - id: trip-service-accounts
          uri: lb://TRIP-SERVICE
          predicates:
            - Path=/api/accounts/**
        - id: exchange-service
          uri: lb://EXCHANGE-SERVICE
          predicates:
            - Path=/api/exchanges/**
        - id: alarm-service
          uri: lb://ALARM-SERVICE
          predicates:
            - Path=/api/alarms/**

eureka:
  instance:
    prefer-ip-address: true
    ip-address: ${GATEWAY_INSTANCE_IP_ADDRESS:localhost}

  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}


jwtKey:
  jwt: ${JWT_SECRET}

management:
  endpoints:
    web:
      exposure:
        include: health, info
  endpoint:
    health:
      show-details: always
